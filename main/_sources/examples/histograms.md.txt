# Histograms

To set up the inputs for the plots, have a look [here](./index.md).

The following examples use the dummy data which is described [here](./dummy_data.md)

## _b_-tagging discriminant plot

<img src=https://github.com/umami-hep/puma/raw/examples-material/histogram_discriminant.png width=500>

```py
"""Produce histogram of discriminant from tagger output and labels."""

import numpy as np

from puma import Histogram, HistogramPlot
from puma.utils import get_dummy_2_taggers

# The line below generates dummy data which is similar to a NN output
df = get_dummy_2_taggers()

# Calculate discriminant scores for DIPS and RNNIP, and add them to the dataframe
FRAC_C = 0.018
df["disc_dips"] = np.log(
    df["dips_pb"] / (FRAC_C * df["dips_pc"] + (1 - FRAC_C) * df["dips_pu"])
)
df["disc_rnnip"] = np.log(
    df["rnnip_pb"] / (FRAC_C * df["rnnip_pc"] + (1 - FRAC_C) * df["rnnip_pu"])
)

# defining boolean arrays to select the different flavour classes
is_light = df["HadronConeExclTruthLabelID"] == 0
is_c = df["HadronConeExclTruthLabelID"] == 4
is_b = df["HadronConeExclTruthLabelID"] == 5

hist_dips_light = Histogram(
    df[is_light]["disc_dips"],
    flavour="ujets",
    label="DIPS",
    # if not set, the "ratio_group" argument would be set to the flavour "ujets"
    # so this is just done here for demonstration purposes
    ratio_group="ujets",
)
hist_dips_c = Histogram(
    df[is_c]["disc_dips"],
    flavour="cjets",
    label="DIPS",
    ratio_group="cjets",
)
hist_dips_b = Histogram(
    df[is_b]["disc_dips"],
    flavour="bjets",
    label="DIPS",
    ratio_group="bjets",
)
hist_rnnip_light = Histogram(
    df[is_light]["disc_rnnip"],
    flavour="ujets",
    label="RNNIP",
    linestyle="dashed",
    ratio_group="ujets",
)
hist_rnnip_c = Histogram(
    df[is_c]["disc_rnnip"],
    flavour="cjets",
    label="RNNIP",
    linestyle="dashed",
    ratio_group="cjets",
)
hist_rnnip_b = Histogram(
    df[is_b]["disc_rnnip"],
    flavour="bjets",
    label="RNNIP",
    linestyle="dashed",
    ratio_group="bjets",
)

# Initialise histogram plot
plot_histo = HistogramPlot(
    n_ratio_panels=1,
    ylabel="Normalised number of jets",
    ylabel_ratio_1="Ratio to DIPS",
    xlabel="$b$-jets discriminant",
    logy=False,
    leg_ncol=2,
    figsize=(6.8, 5),
    bins=np.linspace(-10, 10, 30),
    y_scale=1.5,
    ymax_ratio_1=1.5,
    ymin_ratio_1=0.5,
    atlas_second_tag="$\\sqrt{s}=13$ TeV, dummy jets \ndummy sample, $f_{c}=0.018$",
)

# Add the histograms
plot_histo.add(hist_dips_light, reference=True)
plot_histo.add(hist_dips_c, reference=True)
plot_histo.add(hist_dips_b, reference=True)
plot_histo.add(hist_rnnip_light)
plot_histo.add(hist_rnnip_c)
plot_histo.add(hist_rnnip_b)

plot_histo.draw()
plot_histo.savefig("histogram_discriminant.png", transparent=False)
```

## Flavour probabilities plot

<img src=https://github.com/umami-hep/puma/raw/examples-material/histogram_bjets_probability.png width=500>

```py
"""Example plot script for flavour probability comparison."""

from puma import Histogram, HistogramPlot
from puma.utils import get_dummy_2_taggers

# The line below generates dummy data which is similar to a NN output
df = get_dummy_2_taggers()

# Initialise histogram plot
plot_histo = HistogramPlot(
    n_ratio_panels=0,
    ylabel="Normalised number of jets",
    xlabel="$b$-jets probability",
    logy=True,
    leg_ncol=1,
    figsize=(6, 4.5),
    atlas_first_tag="Simulation, $\\sqrt{s}=13$ TeV",
    atlas_second_tag="dummy sample, dummy jets",
    atlas_brand=None,
    draw_errors=False,
    # bins=np.linspace(0, 1, 30),  # you can also force a binning for the plot here
)

# Add the ttbar histograms
u_jets = df.query("HadronConeExclTruthLabelID==0")
c_jets = df.query("HadronConeExclTruthLabelID==4")
b_jets = df.query("HadronConeExclTruthLabelID==5")

plot_histo.add(Histogram(u_jets["dips_pb"], flavour="ujets"))
plot_histo.add(Histogram(c_jets["dips_pb"], flavour="cjets"))
plot_histo.add(Histogram(b_jets["dips_pb"], flavour="bjets"))

plot_histo.draw()
plot_histo.savefig("histogram_bjets_probability.png", transparent=False)
```

## Example for basic untypical histogram

In most cases you probably want to plot histograms with the different flavours
like in the examples above.
However, the `puma` API allows to plot any kind of data. As an example, you
could also produce a `MC` vs `data` plot with the following example code:

<img src=https://github.com/umami-hep/puma/raw/examples-material/histogram_basic_example.png width=500>

```py
"""Example of histogram plot that deviates from puma default plots."""

import numpy as np

from puma import Histogram, HistogramPlot

# Generate two distributions to plot
N_BKG = int(1e6)
N_SIG = int(2e4)
rng = np.random.default_rng(seed=42)
expectation = rng.exponential(size=N_BKG)
measurement = np.concatenate(
    (rng.exponential(size=N_BKG), rng.normal(loc=2, scale=0.2, size=N_SIG))
)
expectation_hist = Histogram(expectation, label="MC", histtype="stepfilled", alpha=1)
measurement_hist = Histogram(measurement, label="dummy data")

# Initialise histogram plot
plot_histo = HistogramPlot(
    ylabel="Number of events",
    xlabel="Invariant mass $m$ [a.u.]",
    logy=False,
    # bins=np.linspace(0, 5, 60),  # you can force a binning for the plot here
    bins=50,  # you can also define an integer number for the number of bins
    bins_range=(1.1, 4),  # only considered if bins is an integer
    norm=False,
    atlas_first_tag="Simulation Internal",
    atlas_second_tag="Example for more general plot",
    figsize=(6, 5),
    n_ratio_panels=1,
)

# Add histograms and plot
plot_histo.add(expectation_hist, reference=True)
plot_histo.add(measurement_hist)
plot_histo.draw()

plot_histo.savefig("histogram_basic_example.png", transparent=False)
```
